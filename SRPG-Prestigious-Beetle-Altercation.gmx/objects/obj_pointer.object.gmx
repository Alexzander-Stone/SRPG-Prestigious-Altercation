<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_pointer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Constructor
x = 0;
y = 0;

// Used for gradual camera movement.
next_position_x = x;
next_position_y = y;

// Currently selected object.
selected_id = noone

// Move Playable Characters
moving = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Keyboard Input
leftCheck = keyboard_check_pressed(ord('A')) &amp;&amp; (next_position_x-512 &gt;= 0);
rightCheck = keyboard_check_pressed(ord('D')) &amp;&amp; (next_position_x+512 &lt; room_width);
upCheck = keyboard_check_pressed(ord('W')) &amp;&amp; (next_position_y-512 &gt;= 0);
downCheck = keyboard_check_pressed(ord('S')) &amp;&amp; (next_position_y+512 &lt; room_height);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move Pointer
if(leftCheck)
{
    next_position_x -= 512;
}
if(rightCheck)
{
    next_position_x += 512;
}
if(upCheck)
{
    next_position_y -= 512;
}
if(downCheck)
{
    next_position_y += 512;
}

if( y &gt; next_position_y ){ // Gravitate up.
    y -= sprite_width&gt;&gt;4;
}
if( y &lt; next_position_y ){ // Gravitate down.
    y += sprite_width&gt;&gt;4;
}
if( x &gt; next_position_x ){ // Gravitate left.
    x -= sprite_height&gt;&gt;4;
}
if( x &lt; next_position_x ){ // Gravitate right.
    x += sprite_height&gt;&gt;4;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move View
// Move screen if cursor goes beyond view.
if(x + sprite_width &gt; view_xview[0] + view_wview[0]) { // Move camera right
    view_xview[0] += sprite_width&gt;&gt;4;
}
if(x &lt; view_xview[0]) { // Move camera left
    view_xview[0] -= sprite_width&gt;&gt;4;
}
if(y + sprite_height &gt; view_yview[0] + view_hview[0]) { // Move camera down
    view_yview[0] += sprite_height&gt;&gt;4;
}
if(y &lt; view_yview[0]) { // Move camera up
    view_yview[0] -= sprite_height&gt;&gt;4;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Select Commands
// Find the object to interact with.
interact_player_id = instance_position(x, y, obj_player_character_default);


// End moving.
if( keyboard_check_pressed(vk_space) &amp;&amp; moving &amp;&amp; selected_id) {
    selected_id.x = next_position_x;
    selected_id.y = next_position_y;
        
    moving = false;
}

// Hovering over an 
if( interact_player_id ) {
    if( keyboard_check_pressed(vk_space) &amp;&amp; !moving ) {
        selected_id = interact_player_id
        
        moving = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
